import { Extensions as ConfigurationExtensions, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry.js';
import { Registry } from '../../../../platform/registry/common/platform.js';

/**
 * Register AI Companion configuration settings
 */
const configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);

configurationRegistry.registerConfiguration({
    id: 'aiCompanion',
    title: 'AI Companion',
    type: 'object',
    properties: {
        'aiCompanion.enabled': {
            type: 'boolean',
            default: true,
            description: 'Enable AI Companion features'
        },
        'aiCompanion.ai.provider': {
            type: 'string',
            enum: ['openai', 'claude', 'azure', 'local'],
            default: 'openai',
            description: 'AI provider to use for code generation',
            enumDescriptions: [
                'OpenAI GPT models',
                'Anthropic Claude models', 
                'Azure OpenAI Service',
                'Local AI models (Ollama, etc.)'
            ]
        },
        'aiCompanion.ai.apiKey': {
            type: 'string',
            default: '',
            description: 'API key for the AI provider (store securely)',
            markdownDescription: 'API key for the AI provider. **Warning**: This will be stored in VS Code settings. Consider using environment variables for better security.'
        },
        'aiCompanion.ai.model': {
            type: 'string',
            default: 'gpt-4',
            description: 'AI model to use',
            examples: ['gpt-4', 'gpt-3.5-turbo', 'claude-3-sonnet-20240229', 'llama2']
        },
        'aiCompanion.ai.baseUrl': {
            type: 'string',
            default: '',
            description: 'Custom base URL for the AI provider (for Azure, local providers, etc.)',
            examples: [
                'https://your-azure-instance.openai.azure.com',
                'http://localhost:11434/api/generate'
            ]
        },
        'aiCompanion.ai.maxTokens': {
            type: 'number',
            default: 2048,
            minimum: 100,
            maximum: 8192,
            description: 'Maximum number of tokens in AI responses'
        },
        'aiCompanion.ai.temperature': {
            type: 'number',
            default: 0.7,
            minimum: 0,
            maximum: 2,
            description: 'AI creativity level (0 = deterministic, 2 = very creative)'
        },
        'aiCompanion.ai.timeout': {
            type: 'number',
            default: 30000,
            minimum: 5000,
            maximum: 120000,
            description: 'Request timeout in milliseconds'
        },
        'aiCompanion.defaultMode': {
            type: 'string',
            enum: ['helper', 'builder'],
            default: 'helper',
            description: 'Default AI mode when starting new conversations',
            enumDescriptions: [
                'Helper mode: Provides suggestions and guidance',
                'Builder mode: Writes complete code and implements features'
            ]
        },
        'aiCompanion.autoSaveGeneratedFiles': {
            type: 'boolean',
            default: true,
            description: 'Automatically save files generated by AI'
        },
        'aiCompanion.createBackupBeforeGeneration': {
            type: 'boolean',
            default: true,
            description: 'Create backup files before AI generates new code'
        },
        'aiCompanion.memoryRetentionDays': {
            type: 'number',
            default: 30,
            minimum: 1,
            maximum: 365,
            description: 'How many days to retain project memory and conversation history'
        },
        'aiCompanion.maxConversationHistory': {
            type: 'number',
            default: 50,
            minimum: 10,
            maximum: 200,
            description: 'Maximum number of messages to keep in conversation history'
        },
        'aiCompanion.showTaskProgress': {
            type: 'boolean',
            default: true,
            description: 'Show progress indicators during task generation and code creation'
        },
        'aiCompanion.autoCreateTasksFile': {
            type: 'boolean',
            default: true,
            description: 'Automatically create tasks.md file when tasks are generated'
        },
        'aiCompanion.enableCodeLens': {
            type: 'boolean',
            default: true,
            description: 'Show code lens for AI-generated code sections'
        },
        'aiCompanion.enableInlineSuggestions': {
            type: 'boolean',
            default: false,
            description: 'Enable inline AI suggestions while typing (experimental)'
        },
        'aiCompanion.contextFiles': {
            type: 'array',
            items: {
                type: 'string'
            },
            default: ['package.json', 'tsconfig.json', 'README.md', '.env.example'],
            description: 'Files to include in AI context for better understanding of the project'
        },
        'aiCompanion.excludePatterns': {
            type: 'array',
            items: {
                type: 'string'
            },
            default: ['node_modules/**', 'dist/**', 'build/**', '.git/**', '*.log'],
            description: 'File patterns to exclude from AI analysis'
        },
        'aiCompanion.debug': {
            type: 'boolean',
            default: false,
            description: 'Enable debug logging for AI Companion'
        }
    }
});

/**
 * Helper functions for configuration access
 */
export class AICompanionConfiguration {
    static getAIConfig(): {
        provider: string;
        apiKey: string;
        model: string;
        baseUrl?: string;
        maxTokens: number;
        temperature: number;
        timeout: number;
    } {
        // const configuration = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);
        // This would be used in the service to get current config
        // The actual implementation would use IConfigurationService
        return {
            provider: 'openai', // Would come from settings
            apiKey: '',
            model: 'gpt-4',
            maxTokens: 2048,
            temperature: 0.7,
            timeout: 30000
        };
    }

    static validateConfiguration(): { valid: boolean; errors: string[] } {
        // Implementation would validate current settings
        return { valid: true, errors: [] };
    }
}